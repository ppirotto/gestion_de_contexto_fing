CREATE DATABASE  IF NOT EXISTS `cep` /*!40100 DEFAULT CHARACTER SET latin1 */;
USE `cep`;
-- MySQL dump 10.13  Distrib 5.5.41, for debian-linux-gnu (x86_64)
--
-- Host: 127.0.0.1    Database: cep
-- ------------------------------------------------------
-- Server version	5.5.41-0ubuntu0.14.04.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `ACTIVE_CONFIGURATION`
--

DROP TABLE IF EXISTS `ACTIVE_CONFIGURATION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ACTIVE_CONFIGURATION` (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `LAST_DEPLOY_DATE` datetime NOT NULL,
  `VERSION_ID` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK21610F5D94402783` (`VERSION_ID`),
  CONSTRAINT `FK21610F5D94402783` FOREIGN KEY (`VERSION_ID`) REFERENCES `VERSION` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ACTIVE_CONFIGURATION`
--

LOCK TABLES `ACTIVE_CONFIGURATION` WRITE;
/*!40000 ALTER TABLE `ACTIVE_CONFIGURATION` DISABLE KEYS */;
INSERT INTO `ACTIVE_CONFIGURATION` VALUES (1,'2015-01-01 00:00:00',21);
/*!40000 ALTER TABLE `ACTIVE_CONFIGURATION` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `RULE`
--

DROP TABLE IF EXISTS `RULE`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `RULE` (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `NAME` varchar(255) NOT NULL,
  `RULE` mediumtext NOT NULL,
  `VERSION_ID` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK268EFC94402783` (`VERSION_ID`),
  CONSTRAINT `FK268EFC94402783` FOREIGN KEY (`VERSION_ID`) REFERENCES `VERSION` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=64 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `RULE`
--

LOCK TABLES `RULE` WRITE;
/*!40000 ALTER TABLE `RULE` DISABLE KEYS */;
INSERT INTO `RULE` VALUES (1,'CityWeather','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\ndeclare CityWeatherUpdate\n@role(event)\n	city:	String\n	raining:boolean\nend\n\n\nrule \"CityWeatherUpdate Message Mapper\"\nwhen\n    message:HashMap(this[\"type\"] == \"CITY_WEATHER\")\n\nthen\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\n	String body = (String)message.get(\"body\");\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\n	String[] split = body.split(\",\");\n	cityWeatherUpdate.setCity(split[0]);\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean(split[1]));\n	insert(cityWeatherUpdate);    \nend\n\nrule \"CityWeather, new city!\"\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\nthen\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\n	CityWeather cityWeather = new CityWeather();\n	cityWeather.setCity(cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\n	insert(cityWeather);     \nend\n\nrule \"CityWeather, update weather from existing city!\"\nno-loop true\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\nthen\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \n	update(cityWeather);\nend\n\n',1),(2,'ContextReasonerNotification','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\n\ndeclare ContextReasonerNotification\n@role(event)\n	situationName:	String\n	userId:			String\n	contextualData:	HashMap\nend\n\n\nrule \"ContextReasoner Notification...\"\nwhen\n    notif:ContextReasonerNotification()\nthen\n    System.out.println(\"ContextReasoner Notification!!! Preparing to notify!\");\n	HashMap hash = new HashMap<String,Object>();\n	hash.put(\"situationName\",notif.getSituationName());\n	hash.put(\"userId\",notif.getUserId());\n	hash.put(\"contextualData\",notif.getContextualData());\n	CepUtils.notifyContextReasoner(hash);\nend\n\n',1),(3,'UserLocation','package edu.fing.drools;\nimport java.util.HashMap;\n\n\ndeclare UserLocation\n@role(event)\n	lat:	long\n	lon:	long\n	userId:	String\nend\n\ndeclare InCity\n@role(event)\n	city:	String\n	userId:	String\nend\n\ndeclare CityWeather\n@role(event)\n	city:	String\n	raining:boolean\nend\n\nrule \"UserLocationMessageMapper\"\nwhen\n    message:HashMap(this[\"type\"] == \"USER_LOCATION\")\nthen\n    System.out.println(\"Mapping message to UserLocation...\");\n	String body = (String)message.get(\"body\");\n	UserLocation usrLoc = new UserLocation();\n	String[] split = body.split(\",\");\n	usrLoc.setLat(Long.parseLong(split[0]));\n	usrLoc.setLon(Long.parseLong(split[1]));\n	usrLoc.setUserId(split[2]);\n	insert(usrLoc);    \nend\n\n\nrule \"User in City, new\"\nwhen\n    usrLoc:UserLocation()\n    not (exists InCity(userId==usrLoc.userId))\nthen\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\n	InCity usrCity = new InCity();\n	usrCity.setCity(\"CUIDAD 1\");\n	usrCity.setUserId(usrLoc.getUserId());\n	insert(usrCity);    \nend\n\nrule \"User in City, update\"\nno-loop true\nwhen\n    usrLoc:UserLocation()\n    usrInCity:InCity(userId==usrLoc.userId)\nthen\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\n	usrInCity.setCity(\"CUIDAD 1\");\n	update(usrInCity);    \nend\n\n\nrule \"User in City Raining\"\nwhen\n    usrInCity:InCity()\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\nthen\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city= \" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\n    ContextReasonerNotification notif = new ContextReasonerNotification();\n    notif.setSituationName(\"UserInCityRaining\");\n    notif.setUserId(usrInCity.getUserId());\n    HashMap<String,String> contextualData = new HashMap<String,String>();\n    contextualData.put(\"city\",usrInCity.getCity());\n    notif.setContextualData(contextualData);\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\n	insert(notif);\nend\n\n',1),(4,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\n\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	String body = (String)message.get(\"body\");\r\n	UserLocation usrLoc = new UserLocation();\r\n	String[] split = body.split(\",\");\r\n	usrLoc.setLat(Long.parseLong(split[0]));\r\n	usrLoc.setLon(Long.parseLong(split[1]));\r\n	usrLoc.setUserId(split[2]);\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city= \" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    ContextReasonerNotification notif = new ContextReasonerNotification();\r\n    notif.setSituationName(\"UserInCityRaining\");\r\n    notif.setUserId(usrInCity.getUserId());\r\n    HashMap<String,String> contextualData = new HashMap<String,String>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n    notif.setContextualData(contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n	insert(notif);\r\nend\r\n\r\n',2),(5,'CityWeather','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\ndeclare CityWeatherUpdate\n@role(event)\n	city:	String\n	raining:boolean\nend\n\n\nrule \"CityWeatherUpdate Message Mapper\"\nwhen\n    message:HashMap(this[\"type\"] == \"CITY_WEATHER\")\n\nthen\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\n	String body = (String)message.get(\"body\");\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\n	String[] split = body.split(\",\");\n	cityWeatherUpdate.setCity(split[0]);\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean(split[1]));\n	insert(cityWeatherUpdate);    \nend\n\nrule \"CityWeather, new city!\"\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\nthen\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\n	CityWeather cityWeather = new CityWeather();\n	cityWeather.setCity(cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\n	insert(cityWeather);     \nend\n\nrule \"CityWeather, update weather from existing city!\"\nno-loop true\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\nthen\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \n	update(cityWeather);\nend\n\n',2),(6,'ContextReasonerNotification','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\n\ndeclare ContextReasonerNotification\n@role(event)\n	situationName:	String\n	userId:			String\n	contextualData:	HashMap\nend\n\n\nrule \"ContextReasoner Notification...\"\nwhen\n    notif:ContextReasonerNotification()\nthen\n    System.out.println(\"ContextReasoner Notification!!! Preparing to notify!\");\n	HashMap hash = new HashMap<String,Object>();\n	hash.put(\"situationName\",notif.getSituationName());\n	hash.put(\"userId\",notif.getUserId());\n	hash.put(\"contextualData\",notif.getContextualData());\n	CepUtils.notifyContextReasoner(hash);\nend\n\n',2),(7,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	String body = (String)message.get(\"body\");\r\n	UserLocation usrLoc = new UserLocation();\r\n	String[] split = body.split(\",\");\r\n	usrLoc.setLat(Long.parseLong(split[0]));\r\n	usrLoc.setLon(Long.parseLong(split[1]));\r\n	usrLoc.setUserId(split[2]);\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city= \" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    ContextReasonerNotification notif = new ContextReasonerNotification();\r\n    notif.setSituationName(\"UserInCityRaining\");\r\n    notif.setUserId(usrInCity.getUserId());\r\n    HashMap<String,String> contextualData = new HashMap<String,String>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n    notif.setContextualData(contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n	insert(notif);\r\nend\r\n\r\n',3),(8,'CityWeather','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\ndeclare CityWeatherUpdate\n@role(event)\n	city:	String\n	raining:boolean\nend\n\n\nrule \"CityWeatherUpdate Message Mapper\"\nwhen\n    message:HashMap(this[\"type\"] == \"CITY_WEATHER\")\n\nthen\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\n	String body = (String)message.get(\"body\");\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\n	String[] split = body.split(\",\");\n	cityWeatherUpdate.setCity(split[0]);\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean(split[1]));\n	insert(cityWeatherUpdate);    \nend\n\nrule \"CityWeather, new city!\"\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\nthen\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\n	CityWeather cityWeather = new CityWeather();\n	cityWeather.setCity(cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\n	insert(cityWeather);     \nend\n\nrule \"CityWeather, update weather from existing city!\"\nno-loop true\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\nthen\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \n	update(cityWeather);\nend\n\n',3),(9,'ContextReasonerNotification','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\n\ndeclare ContextReasonerNotification\n@role(event)\n	situationName:	String\n	userId:			String\n	contextualData:	HashMap\nend\n\n\nrule \"ContextReasoner Notification...\"\nwhen\n    notif:ContextReasonerNotification()\nthen\n    System.out.println(\"ContextReasoner Notification!!! Preparing to notify!\");\n	HashMap hash = new HashMap<String,Object>();\n	hash.put(\"situationName\",notif.getSituationName());\n	hash.put(\"userId\",notif.getUserId());\n	hash.put(\"contextualData\",notif.getContextualData());\n	CepUtils.notifyContextReasoner(hash);\nend\n\n',3),(10,'CityWeather','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\ndeclare CityWeatherUpdate\n@role(event)\n	city:	String\n	raining:boolean\nend\n\n\nrule \"CityWeatherUpdate Message Mapper\"\nwhen\n    message:HashMap(this[\"type\"] == \"CITY_WEATHER\")\n\nthen\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\n	String body = (String)message.get(\"body\");\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\n	String[] split = body.split(\",\");\n	cityWeatherUpdate.setCity(split[0]);\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean(split[1]));\n	insert(cityWeatherUpdate);    \nend\n\nrule \"CityWeather, new city!\"\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\nthen\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\n	CityWeather cityWeather = new CityWeather();\n	cityWeather.setCity(cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\n	insert(cityWeather);     \nend\n\nrule \"CityWeather, update weather from existing city!\"\nno-loop true\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\nthen\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \n	update(cityWeather);\nend\n\n',4),(11,'ContextReasonerNotification','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\n\ndeclare ContextReasonerNotification\n@role(event)\n	situationName:	String\n	userId:			String\n	contextualData:	HashMap\nend\n\n\nrule \"ContextReasoner Notification...\"\nwhen\n    notif:ContextReasonerNotification()\nthen\n    System.out.println(\"ContextReasoner Notification!!! Preparing to notify!\");\n	HashMap hash = new HashMap<String,Object>();\n	hash.put(\"situationName\",notif.getSituationName());\n	hash.put(\"userId\",notif.getUserId());\n	hash.put(\"contextualData\",notif.getContextualData());\n	CepUtils.notifyContextReasoner(hash);\nend\n\n',4),(12,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat((String)info.get(\"lat\"));\r\n	usrLoc.setLon((String)info.get(\"lon\"));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city= \" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    ContextReasonerNotification notif = new ContextReasonerNotification();\r\n    notif.setSituationName(\"UserInCityRaining\");\r\n    notif.setUserId(usrInCity.getUserId());\r\n    HashMap<String,String> contextualData = new HashMap<String,String>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n    notif.setContextualData(contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n	insert(notif);\r\nend\r\n\r\n',4),(13,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat((String)info.get(\"lat\"));\r\n	usrLoc.setLon((String)info.get(\"lon\"));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city= \" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    ContextReasonerNotification notif = new ContextReasonerNotification();\r\n    notif.setSituationName(\"UserInCityRaining\");\r\n    notif.setUserId(usrInCity.getUserId());\r\n    HashMap<String,String> contextualData = new HashMap<String,String>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n    notif.setContextualData(contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n	insert(notif);\r\nend\r\n\r\n',5),(14,'ContextReasonerNotification','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\n\ndeclare ContextReasonerNotification\n@role(event)\n	situationName:	String\n	userId:			String\n	contextualData:	HashMap\nend\n\n\nrule \"ContextReasoner Notification...\"\nwhen\n    notif:ContextReasonerNotification()\nthen\n    System.out.println(\"ContextReasoner Notification!!! Preparing to notify!\");\n	HashMap hash = new HashMap<String,Object>();\n	hash.put(\"situationName\",notif.getSituationName());\n	hash.put(\"userId\",notif.getUserId());\n	hash.put(\"contextualData\",notif.getContextualData());\n	CepUtils.notifyContextReasoner(hash);\nend\n\n',5),(15,'CityWeather','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\ndeclare CityWeatherUpdate\n@role(event)\n	city:	String\n	raining:boolean\nend\n\n\nrule \"CityWeatherUpdate Message Mapper\"\nwhen\n    message:HashMap(this[\"type\"] == \"CITY_WEATHER\")\n\nthen\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\n	String body = (String)message.get(\"body\");\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\n	String[] split = body.split(\",\");\n	cityWeatherUpdate.setCity(split[0]);\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean(split[1]));\n	insert(cityWeatherUpdate);    \nend\n\nrule \"CityWeather, new city!\"\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\nthen\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\n	CityWeather cityWeather = new CityWeather();\n	cityWeather.setCity(cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\n	insert(cityWeather);     \nend\n\nrule \"CityWeather, update weather from existing city!\"\nno-loop true\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\nthen\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \n	update(cityWeather);\nend\n\n',5),(16,'ContextReasonerNotification','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\n\ndeclare ContextReasonerNotification\n@role(event)\n	situationName:	String\n	userId:			String\n	contextualData:	HashMap\nend\n\n\nrule \"ContextReasoner Notification...\"\nwhen\n    notif:ContextReasonerNotification()\nthen\n    System.out.println(\"ContextReasoner Notification!!! Preparing to notify!\");\n	HashMap hash = new HashMap<String,Object>();\n	hash.put(\"situationName\",notif.getSituationName());\n	hash.put(\"userId\",notif.getUserId());\n	hash.put(\"contextualData\",notif.getContextualData());\n	CepUtils.notifyContextReasoner(hash);\nend\n\n',6),(17,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong(info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong(info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city= \" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    ContextReasonerNotification notif = new ContextReasonerNotification();\r\n    notif.setSituationName(\"UserInCityRaining\");\r\n    notif.setUserId(usrInCity.getUserId());\r\n    HashMap<String,String> contextualData = new HashMap<String,String>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n    notif.setContextualData(contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n	insert(notif);\r\nend\r\n\r\n',6),(18,'CityWeather','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\ndeclare CityWeatherUpdate\n@role(event)\n	city:	String\n	raining:boolean\nend\n\n\nrule \"CityWeatherUpdate Message Mapper\"\nwhen\n    message:HashMap(this[\"type\"] == \"CITY_WEATHER\")\n\nthen\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\n	String body = (String)message.get(\"body\");\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\n	String[] split = body.split(\",\");\n	cityWeatherUpdate.setCity(split[0]);\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean(split[1]));\n	insert(cityWeatherUpdate);    \nend\n\nrule \"CityWeather, new city!\"\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\nthen\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\n	CityWeather cityWeather = new CityWeather();\n	cityWeather.setCity(cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\n	insert(cityWeather);     \nend\n\nrule \"CityWeather, update weather from existing city!\"\nno-loop true\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\nthen\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \n	update(cityWeather);\nend\n\n',6),(19,'CityWeather','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\ndeclare CityWeatherUpdate\n@role(event)\n	city:	String\n	raining:boolean\nend\n\n\nrule \"CityWeatherUpdate Message Mapper\"\nwhen\n    message:HashMap(this[\"type\"] == \"CITY_WEATHER\")\n\nthen\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\n	String body = (String)message.get(\"body\");\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\n	String[] split = body.split(\",\");\n	cityWeatherUpdate.setCity(split[0]);\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean(split[1]));\n	insert(cityWeatherUpdate);    \nend\n\nrule \"CityWeather, new city!\"\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\nthen\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\n	CityWeather cityWeather = new CityWeather();\n	cityWeather.setCity(cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\n	insert(cityWeather);     \nend\n\nrule \"CityWeather, update weather from existing city!\"\nno-loop true\nwhen\n    cityWeatherUpdate:CityWeatherUpdate()\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\nthen\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \n	update(cityWeather);\nend\n\n',7),(20,'ContextReasonerNotification','package edu.fing.drools;\n\nimport java.util.HashMap;\nimport edu.fing.cep.engine.utils.CepUtils;\n\n\ndeclare ContextReasonerNotification\n@role(event)\n	situationName:	String\n	userId:			String\n	contextualData:	HashMap\nend\n\n\nrule \"ContextReasoner Notification...\"\nwhen\n    notif:ContextReasonerNotification()\nthen\n    System.out.println(\"ContextReasoner Notification!!! Preparing to notify!\");\n	HashMap hash = new HashMap<String,Object>();\n	hash.put(\"situationName\",notif.getSituationName());\n	hash.put(\"userId\",notif.getUserId());\n	hash.put(\"contextualData\",notif.getContextualData());\n	CepUtils.notifyContextReasoner(hash);\nend\n\n',7),(21,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city= \" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    ContextReasonerNotification notif = new ContextReasonerNotification();\r\n    notif.setSituationName(\"UserInCityRaining\");\r\n    notif.setUserId(usrInCity.getUserId());\r\n    HashMap<String,String> contextualData = new HashMap<String,String>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n    notif.setContextualData(contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n	insert(notif);\r\nend\r\n\r\n',7),(22,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\n\r\ndeclare ContextReasonerNotification\r\n@role(event)\r\n	situationName:	String\r\n	userId:			String\r\n	contextualData:	HashMap\r\nend\r\n\r\nfunction String situationDetected(String userId, String situationName, HashMap<String,Object> contextualData) {\r\n	\r\n    return \"Hello \"+name+\"!\";\r\n}\r\n\r\nrule \"ContextReasoner Notification...\"\r\nwhen\r\n    notif:ContextReasonerNotification()\r\nthen\r\n    System.out.println(\"ContextReasoner Notification!!! Preparing to notify!\");\r\n	HashMap hash = new HashMap<String,Object>();\r\n	hash.put(\"situationName\",notif.getSituationName());\r\n	hash.put(\"userId\",notif.getUserId());\r\n	hash.put(\"contextualData\",notif.getContextualData());\r\n	CepUtils.notifyContextReasoner(hash);\r\nend\r\n\r\n',8),(23,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    ContextReasonerNotification notif = new ContextReasonerNotification();\r\n    notif.setSituationName(\"UserInCityRaining\");\r\n    notif.setUserId(usrInCity.getUserId());\r\n    HashMap<String,String> contextualData = new HashMap<String,String>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n    notif.setContextualData(contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n	insert(notif);\r\nend\r\n\r\n',8),(24,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getType() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	String body = (String)message.get(\"body\");\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	String[] split = body.split(\",\");\r\n	cityWeatherUpdate.setCity(split[0]);\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean(split[1]));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',8),(25,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getType() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	String body = (String)message.get(\"body\");\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	String[] split = body.split(\",\");\r\n	cityWeatherUpdate.setCity(split[0]);\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean(split[1]));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',9),(26,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, HashMap<String,Object> contextualData) {\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',9),(27,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,String> contextualData = new HashMap<String,String>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',9),(28,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,String> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',10),(29,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getType() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	String body = (String)message.get(\"body\");\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	String[] split = body.split(\",\");\r\n	cityWeatherUpdate.setCity(split[0]);\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean(split[1]));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',10),(30,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, HashMap<String,Object> contextualData) {\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',10),(31,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',11),(32,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, HashMap<String,Object> contextualData) {\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',11),(33,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getType() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	String body = (String)message.get(\"body\");\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	String[] split = body.split(\",\");\r\n	cityWeatherUpdate.setCity(split[0]);\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean(split[1]));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',11),(34,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getType() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	cityWeatherUpdate.setCity((String)info.get(\"city\"));\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean(info.get(\"raining\"));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',12),(35,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, HashMap<String,Object> contextualData) {\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',12),(36,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',12),(37,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, HashMap<String,Object> contextualData) {\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',13),(38,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',13),(39,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getType() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	cityWeatherUpdate.setCity((String)info.get(\"city\"));\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean((String)info.get(\"raining\"));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',13),(40,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',14),(41,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getType() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	cityWeatherUpdate.setCity((String)info.get(\"city\"));\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean((String)info.get(\"raining\")));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',14),(42,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, HashMap<String,Object> contextualData) {\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',14),(43,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, Map<String,Object> contextualData) {\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',15),(44,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',15),(45,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getType() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	cityWeatherUpdate.setCity((String)info.get(\"city\"));\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean((String)info.get(\"raining\")));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',15),(46,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, Map contextualData) {\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',16),(47,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getType() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	cityWeatherUpdate.setCity((String)info.get(\"city\"));\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean((String)info.get(\"raining\")));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',16),(48,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getType() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',16),(49,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getEventName() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	cityWeatherUpdate.setCity((String)info.get(\"city\"));\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean((String)info.get(\"raining\")));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',17),(50,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, Map contextualData) {\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',17),(51,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getEventName() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);    \r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',17),(52,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getEventName() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	cityWeatherUpdate.setCity((String)info.get(\"city\"));\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean((String)info.get(\"raining\")));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',18),(53,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getEventName() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);   \r\n	HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrLoc.getUserId(), \"PRUEBA!!\",contextualData);\r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',18),(54,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, Map contextualData) {\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',18),(55,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, Map contextualData) {\r\n  	System.out.println(\"situationDetected yeah...\");\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',19),(56,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getEventName() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	cityWeatherUpdate.setCity((String)info.get(\"city\"));\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean((String)info.get(\"raining\")));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',19),(57,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getEventName() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);   \r\n	HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrLoc.getUserId(), \"PRUEBA!!\",contextualData);\r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',19),(58,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getEventName() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);   \r\n	HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrLoc.getCity());\r\n	situationDetected(usrLoc.getUserId(), \"PRUEBA!!\",contextualData);\r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',20),(59,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getEventName() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	cityWeatherUpdate.setCity((String)info.get(\"city\"));\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean((String)info.get(\"raining\")));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',20),(60,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, Map contextualData) {\r\n  	System.out.println(\"situationDetected yeah...\");\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',20),(61,'CityWeather','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\n\r\ndeclare CityWeatherUpdate\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\n\r\nrule \"CityWeatherUpdate Message Mapper\"\r\nwhen\r\n	message:ContextualDataTO(this.getEventName() == \"CITY_WEATHER\")\r\nthen\r\n    System.out.println(\"Mapping message to CityWeatherUpdate...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	CityWeatherUpdate cityWeatherUpdate = new CityWeatherUpdate();\r\n	cityWeatherUpdate.setCity((String)info.get(\"city\"));\r\n	cityWeatherUpdate.setRaining(Boolean.parseBoolean((String)info.get(\"raining\")));\r\n	insert(cityWeatherUpdate);    \r\nend\r\n\r\nrule \"CityWeather, new city!\"\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    not (exists CityWeather(city==cityWeatherUpdate.city ))\r\nthen\r\n    System.out.println(\"CityWeather, new city! city= \" + cityWeatherUpdate.getCity());\r\n	CityWeather cityWeather = new CityWeather();\r\n	cityWeather.setCity(cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining());\r\n	insert(cityWeather);     \r\nend\r\n\r\nrule \"CityWeather, update weather from existing city!\"\r\nno-loop true\r\nwhen\r\n    cityWeatherUpdate:CityWeatherUpdate()\r\n    cityWeather:CityWeather(city==cityWeatherUpdate.city)\r\nthen\r\n    System.out.println(\"CityWeather, update weather from existing city! city= \" + cityWeatherUpdate.getCity());\r\n	cityWeather.setRaining(cityWeatherUpdate.isRaining()); \r\n	update(cityWeather);\r\nend\r\n\r\n',21),(62,'UserLocation','package edu.fing.drools;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport edu.fing.commons.dto.ContextualDataTO;\r\n\r\ndeclare UserLocation\r\n@role(event)\r\n	lat:	long\r\n	lon:	long\r\n	userId:	String\r\nend\r\n\r\ndeclare InCity\r\n@role(event)\r\n	city:	String\r\n	userId:	String\r\nend\r\n\r\ndeclare CityWeather\r\n@role(event)\r\n	city:	String\r\n	raining:boolean\r\nend\r\n\r\nrule \"UserLocationMessageMapper\"\r\nwhen\r\n    message:ContextualDataTO(this.getEventName() == \"USER_LOCATION\")\r\nthen\r\n    System.out.println(\"Mapping message to UserLocation...\");\r\n	Map<String,Object> info = message.getInfo();\r\n	UserLocation usrLoc = new UserLocation();\r\n	usrLoc.setLat(Long.parseLong((String)info.get(\"lat\")));\r\n	usrLoc.setLon(Long.parseLong((String)info.get(\"lon\")));\r\n	usrLoc.setUserId((String)info.get(\"userId\"));\r\n	insert(usrLoc);   \r\n	HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",\"ciudadInventada!!\");\r\n	situationDetected(usrLoc.getUserId(), \"PRUEBA!!\",contextualData);\r\nend\r\n\r\n\r\nrule \"User in City, new\"\r\nwhen\r\n    usrLoc:UserLocation()\r\n    not (exists InCity(userId==usrLoc.userId))\r\nthen\r\n    System.out.println(\"UserLocation received NEW... userId= \" + usrLoc.getUserId());\r\n	InCity usrCity = new InCity();\r\n	usrCity.setCity(\"CUIDAD 1\");\r\n	usrCity.setUserId(usrLoc.getUserId());\r\n	insert(usrCity);    \r\nend\r\n\r\nrule \"User in City, update\"\r\nno-loop true\r\nwhen\r\n    usrLoc:UserLocation()\r\n    usrInCity:InCity(userId==usrLoc.userId)\r\nthen\r\n    System.out.println(\"UserLocation received UPDATE... userId= \" + usrLoc.getUserId());\r\n	usrInCity.setCity(\"CUIDAD 1\");\r\n	update(usrInCity);    \r\nend\r\n\r\n\r\nrule \"User in City Raining\"\r\nwhen\r\n    usrInCity:InCity()\r\n    CityWeather (city == usrInCity.city, raining == true) over window:time( 30m )\r\nthen\r\n    System.out.println(\"UserInCity RAINING!!! userId= \" + usrInCity.getUserId() + \"city=\" + usrInCity.getCity() + \"  ---  NOTIFICAR CONTEXT REASONER!!!!!\");\r\n    HashMap<String,Object> contextualData = new HashMap<String,Object>();\r\n    contextualData.put(\"city\",usrInCity.getCity());\r\n	situationDetected(usrInCity.getUserId(), \"UserInCityRaining\",contextualData);\r\n    System.out.println(\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\");\r\n\r\nend\r\n\r\n',21),(63,'ContextReasonerNotification','package edu.fing.drools;\r\n\r\nimport java.util.HashMap;\r\nimport edu.fing.cep.engine.utils.CepUtils;\r\nimport edu.fing.commons.dto.SituationDetectedTO;\r\n\r\n\r\nfunction void situationDetected(String userId, String situationName, Map contextualData) {\r\n  	System.out.println(\"situationDetected yeah...\");\r\n  	SituationDetectedTO situation = new SituationDetectedTO();\r\n  	situation.setSituationName(situationName);\r\n  	situation.setUserId(userId);\r\n  	situation.setContextualData(contextualData);\r\n	CepUtils.notifyContextReasoner(situation);\r\n}\r\n\r\n',21);
/*!40000 ALTER TABLE `RULE` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `VERSION`
--

DROP TABLE IF EXISTS `VERSION`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `VERSION` (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `CREATION_DATE` datetime NOT NULL,
  `VERSION_NUMBER` varchar(255) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `VERSION`
--

LOCK TABLES `VERSION` WRITE;
/*!40000 ALTER TABLE `VERSION` DISABLE KEYS */;
INSERT INTO `VERSION` VALUES (1,'2012-06-27 00:00:00','1.0.0'),(2,'2015-02-07 16:27:48','1.0.1'),(3,'2015-02-07 16:30:00','1.0.2'),(4,'2015-02-07 16:37:52','1.0.3'),(5,'2015-02-07 16:38:50','1.0.4'),(6,'2015-02-07 16:40:22','1.0.5'),(7,'2015-02-07 16:41:09','1.0.6'),(8,'2015-02-09 20:02:30','1.0.7'),(9,'2015-02-09 20:29:32','1.0.8'),(10,'2015-02-09 20:31:19','1.0.9'),(11,'2015-02-09 20:32:49','1.1.0'),(12,'2015-02-09 20:37:10','1.1.1'),(13,'2015-02-09 20:38:32','1.1.2'),(14,'2015-02-09 20:39:38','1.1.3'),(15,'2015-02-09 20:45:19','1.1.4'),(16,'2015-02-09 20:46:33','1.1.5'),(17,'2015-02-12 23:40:44','1.1.6'),(18,'2015-02-12 23:43:37','1.1.7'),(19,'2015-02-12 23:48:38','1.1.8'),(20,'2015-02-12 23:49:40','1.1.9'),(21,'2015-02-12 23:50:47','1.1.10');
/*!40000 ALTER TABLE `VERSION` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2015-03-01 11:57:52
